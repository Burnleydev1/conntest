open Mirage

let name =
  let long_name = "name" in
  let doc =
    Key.Arg.info
      ~doc:"The name of the unikernel, used to show successful connections."
      [ long_name ]
  in
  Key.(create long_name Arg.(required ~stage:`Run string doc))

let listens =
  let long_name = "listen" in
  let doc =
    (*> goto check man generated by pair, if need to explain more*)
    Key.Arg.info
      ~doc:"Which protocol and port to listen to respectively, separated \
            by ':'. E.g. tcp:1234"
      ~docv:"<PROTO>:<PORT>"
      [ long_name ]
  in
  let key_conv = Key.Arg.(pair ~sep:':' string int) in
  Key.(create long_name Arg.(opt_all ~stage:`Run key_conv doc))

let connections =
  let long_name = "connect" in
  let doc =
    Key.Arg.info
      ~doc:"Which other conntest-instance URIs to connect to. Query \
            parameters are used to pass extra options, which includes: \
            monitor-bandwidth. E.g. tcp://1.2.3.4:1234?monitor-bandwidth"
      ~docv:"<URI>"
      [ long_name ]
  in
  Key.(create long_name Arg.(opt_all ~stage:`Run string doc))

let keys = [
  key name;
  key listens;
  key connections;
]

let main = main ~keys "Unikernel.Main" (stackv4 @-> job)

let stack = generic_stackv4 default_network

let () = register "conntest" [ main $ stack ]
